/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

/*
apply plugin:'java'
sourceSets {
    integTest
}

group 'org'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    flatDir {
        dirs '/home/borisov/_apps/libs/'
    }
}
*/

ext{
//    log4jVersion = '2.12.1'
  rebuild = "../rebuild/"
  templatesPath = "/mnt/d/projects/myWeb1/templates"
  rebuildPath = "/mnt/d/projects/myWeb1/rebuild"
}
/*
dependencies {
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
}
*/

task indexHaml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "index.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page1Haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page1.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page2Haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page2.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page3Haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page3.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page4Haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page4.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page5Haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page5.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page6haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page6.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task page7Haml(type:Exec) {
  workingDir templatesPath

  commandLine "haml", "page", rebuild + "page7.html"

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
  //dependOn =
}

task indexDiff(type:Exec) {
  workingDir rebuildPath
  commandLine "html-differ", "index.html", "../index.htm"

  //store the output instead of printing to the console:
//  standardOutput = new ByteArrayOutputStream()
  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
//    return standardOutput.toString()
  }
  //dependOn =
}
